name: CI/CD

on:
  push:
    paths:
      - melody_core/*
      - melody_processes/*
      - .github/workflows/ci-cd.yml
  workflow_run:
    workflows:
      - Commit melody_core
      - Commit melody_processes
    types: [completed]
  workflow_dispatch:

jobs:
  build-melody_core:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.get-solution-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/powerplatform-actions/pack-solution@v0
        with:
          solution-file: ${{ runner.temp }}/melody_core.zip
          solution-folder: melody_core
          solution-type: Managed
      - uses: actions/upload-artifact@v2
        with:
          name: melody_core
          path: ${{ runner.temp }}/melody_core.zip
      - name: Get solution version
        id: get-solution-version
        run: |
          $xml = New-Object xml
          $xml.Load("melody_core/Other/Solution.xml")
          $versionNode = $xml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version")
          $version = $versionNode.InnerText
          Write-Host "::set-output name=version::$version"
        shell: pwsh
  build-melody_processes:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.get-solution-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/powerplatform-actions/pack-solution@v0
        with:
          solution-file: ${{ runner.temp }}/melody_processes.zip
          solution-folder: melody_processes
          solution-type: Managed
      - uses: actions/upload-artifact@v2
        with:
          name: melody_processes
          path: ${{ runner.temp }}/melody_processes.zip
      - name: Get solution version
        id: get-solution-version
        run: |
          $xml = New-Object xml
          $xml.Load("melody_processes/Other/Solution.xml")
          $versionNode = $xml.SelectSingleNode("/ImportExportXml/SolutionManifest/Version")
          $version = $versionNode.InnerText
          Write-Host "::set-output name=version::$version"
        shell: pwsh
  deploy:
    environment: production
    runs-on: windows-latest
    needs:
      - build-melody_core
      - build-melody_processes
    steps:
      - run: |
          function Get-ImportAction($compiledVersion, $deployedVersion) {
            $compiledParts = $compiledVersion.Split(".")
            $deployedParts = $deployedVersion.Split(".")
            for($i = 0; $i -lt 4; $i++) {
              if($deployedParts[$i] -gt $compiledParts[$i]) {
                return "skip"
              } elseif($deployedParts[$i] -lt $compiledParts[$i]) {
                if($i -ge 2) {
                  return "update"
                } else {
                  return "upgrade"
                }
              }
            }
            return "skip"
          }

          Install-Module Microsoft.Xrm.Data.PowerShell -Force
          $conn = Get-CrmConnection -ConnectionString $env:CONNECTION_STRING
          $solutions = Get-CrmRecordsByFetch `
            -conn $conn `
            -Fetch ( `
              "<fetch>" +
                "<entity name=`"solution`">" +
                  "<attribute name=`"uniquename`" />" +
                  "<attribute name=`"version`" />" +
                  "<filter>" +
                    "<condition attribute=`"uniquename`" operator=`"in`">" +
                      "<value>melody_core</value>" +
                      "<value>melody_processes</value>" +
                    "</condition>" +
                  "</filter>" +
                "</entity>" +
              "</fetch>"
            )
          $solutions.CrmRecords | ForEach-Object {
            $solution = $_
            $compiledVersion = [Environment]::GetEnvironmentVariable("$($solution.uniquename)_VERSION")
            $deployedVersion = $solution.version
            Write-Host "$($solution.uniquename):"
            Write-Host "  compiled solution version: $compiledVersion"
            Write-Host "  currently deployed solution version: $deployedVersion"
            $importAction = Get-ImportAction $compiledVersion $deployedVersion
            Write-Host "  import action: $importAction"
            Write-Host "::set-output name=$($solution.uniquename)-action::$importAction"
          }
        shell: powershell
        env:
          CONNECTION_STRING: "AuthType=ClientSecret; TenantId=${{ secrets.TENANT_ID }}; ClientId=${{ secrets.CLIENT_ID }}; ClientSecret=${{ secrets.CLIENT_SECRET }}; Url=${{ secrets.URL }}"
          melody_core_VERSION: ${{ needs.build-melody_processes.outputs.version }}
          melody_processes_VERSION: ${{ needs.build-melody_processes.outputs.version }}
        id: deployment-plan
        name: Get deployment plan
      - name: Download melody_core
        uses: actions/download-artifact@v2
        if: ${{ steps.deployment-plan.outputs.melody_core-action != 'skip' }}
        with:
          name: melody_core
      - name: Import melody_core
        uses: microsoft/powerplatform-actions/import-solution@v0
        if: ${{ steps.deployment-plan.outputs.melody_core-action != 'skip' }}
        with:
          environment-url: ${{ secrets.URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: melody_core.zip
          run-asynchronously: true
      - name: Download melody_processes
        uses: actions/download-artifact@v2
        if: ${{ steps.deployment-plan.outputs.melody_processes-action != 'skip' }}
        with:
          name: melody_processes
      - name: Import melody_processes
        uses: microsoft/powerplatform-actions/import-solution@v0
        if: ${{ steps.deployment-plan.outputs.melody_processes-action != 'skip' }}
        with:
          environment-url: ${{ secrets.URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: melody_processes.zip
          run-asynchronously: true
