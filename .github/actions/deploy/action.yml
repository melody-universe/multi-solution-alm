name: deploy
description: pack and import all solutions within this repository
inputs:
  environment-url:
    description: 'URL of Power Platform environment to connect with; e.g. "https://test-env.crm.dynamics.com"'
    required: true
  app-id:
    description: "The application id to authenticate with."
    required: true
  client-secret:
    description: "The client secret to authenticate with."
    required: true
  tenant-id:
    description: "Tenant id to authenticate with."
    required: true
  allow-rollback:
    default: false
    description: "Flag to allow rollback method"
    required: false

runs:
  using: composite
  steps:
    - uses: ./.github/actions/pac-auth
      with:
        environment-url: ${{ inputs.environment-url }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}
    - id: get-repo-solution-names
      uses: ./.github/actions/get-repo-solution-names
    - id: get-api-token
      uses: ./.github/actions/get-api-token
      with:
        environment-url: ${{ inputs.environment-url }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}
    - env:
        SOLUTION_NAMES: ${{ steps.get-repo-solution-names.outputs.solution-names }}
        TOKEN: ${{ steps.get-api-token.outputs.token }}
        URL: ${{ inputs.environment-url }}
      run: |
        solutionNames=$(echo $SOLUTION_NAMES | tr "," "\n")
        upgrades=""
        for name in $solutionNames
        do
          echo "solution name: $name"
          localVersion=$(
            grep -iEo "<version>[0-9.]*" "./$name/Other/Solution.xml" |
            awk -F '>' '{print $2}'
          )
          localMajor=$(echo $localVersion | awk -F '.' '{print $1}')
          localMinor=$(echo $localVersion | awk -F '.' '{print $2}')
          localBuild=$(echo $localVersion | awk -F '.' '{print $3}')
          localRevision=$(echo $localVersion | awk -F '.' '{print $4}')
          echo "local version: $localVersion"

          remoteVersion=$(curl -s \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            "$URL/api/data/v9.2/solutions?\$select=version&\$filter=uniquename%20eq%20'$name'" | \
            jq -r ".value[0].version"
          )
          echo "remote version: $remoteVersion"
          if [[ $remoteVersion == "null" ]]
          then
            action="import"
          else
            remoteMajor=$(echo $remoteVersion | awk -F '.' '{print $1}')
            remoteMinor=$(echo $remoteVersion | awk -F '.' '{print $2}')
            remoteBuild=$(echo $remoteVersion | awk -F '.' '{print $3}')
            remoteRevision=$(echo $remoteVersion | awk -F '.' '{print $4}')

            if [[ $localMajor -eq $remoteMajor
              && $localMinor -eq $remoteMinor ]]
            then
              if [[ $localBuild -eq $remoteBuild
                && $localRevision -eq $remoteRevision ]]
              then
                action="skip"
              elif [[ $localBuild -gt $remoteBuild
                || ($localBuild -eq $remoteBuild
                  && $localRevision -gt $remoteRevision) ]]
              then
                action="update"
              else
                action="rollback"
              fi
            elif [[ $localMajor -gt $remoteMajor
              || ($localMajor -eq $remoteMajor
                && $localMinor -gt $remoteMinor) ]]
            then
              action="upgrade"
            else
              action="rollback"
            fi
          fi

          echo "deployment action: $action"

          if [[ $action == "rollback" ]]
          then
            if [[ "${{ inputs.allow-rollback }}" != "true" ]]
            then
              echo "::error title=Unexpected Version Number::$name is a higher version in the target environment ($remoteVersion) than in the locally packed solution ($localVersion), and rollback is not enabled for this deployment."
              exit 1
            fi

            rollbackMajor=$localMajor
            rollbackMinor=$localMinor
            rollbackBuild=$localBuild
            rollbackRevision=$localRevision

            if [[ $rollbackRevision -gt 0 ]]
            then
              let "rollbackRevision = $rollbackRevision - 1"
            elif [[ $rollbackBuild -gt 0 ]]
            then
              let "rollbackBuild = $rollbackBuild - 1"
            elif [[ $rollbackMinor -gt 0 ]]
            then
              let "rollbackMinor = $rollbackMinor - 1"
            elif [[ $rollbackMajor -gt 0 ]]
            then
              let "rollbackMajor = $rollbackMajor - 1"
            else
              echo "::error title=Unexpected Version Number::$name has a local version of 0.0.0.0. Cannot rollback to this version number."
              exit 1
            fi
            rollbackVersion="$rollbackMajor.$rollbackMinor.$rollbackBuild.$rollbackRevision"

            echo "Generating solution with reduced version number ($rollbackVersion) for $name"
            sed -i \
              "s|\(<version>\)[0-9.]*\(</version>\)|\1$rollbackVersion\2|i" \
              "./$name/Other/Solution.xml"
            pac solution pack \
              --zipfile "$name_reduced.zip" \
              --folder $name \
              --packagetype Managed
            echo "Restoring version to commit value for $name"
            sed -i \
              "s|\(<version>\)[0-9.]*\(</version>\)|\1$localVersion\2|i" \
              "./$name/Other/Solution.xml"
          fi
          if [[ $action == "skip" ]]
          then
            echo "$name is already up-to-date; skipping"
          else
            echo "packing $name"
            pac solution pack \
              --zipfile "$name.zip" \
              --folder $name \
              --packagetype Managed
            case $action in
              import | update)
                echo "importing $name"
                pac solution import \
                  --path "$name.zip" \
                  --activate-plugins \
                  --async
              ;;
              upgrade)
                echo "importing holding solution for $name"
                pac solution import \
                  --path "$name.zip" \
                  --activate-plugins \
                  --import-as-holding \
                  --async
                upgrades="$name,$upgrades"
              ;;
              rollback)
                echo "importing reduced version number for $name"
                pac solution import \
                  --path "$name_reduced.zip" \
                  --activate-plugins \
                  --async
                echo "importing rollback version number for $name"
                pac solution import \
                  --path "$name.zip" \
                  --activate-plugins \
                  --import-as-holding \
                  --async
                upgrades="$name,$upgrades"
              ;;
              *)
                echo "::error title=Unexpected Action::unexpected action ($action) for $name"
                exit 1
              ;;
            esac
          fi
        done

        if [[ $upgrades != "" ]]
        then
          solutionsToUpgrade=$(echo ${upgrades::-1} | tr "," "\n")
          for name in $solutionsToUpgrade
          do
            echo "applying upgrade to $name"
            pac solution upgrade \
              --solution-name $name \
              --async
          done
        fi
      shell: bash
