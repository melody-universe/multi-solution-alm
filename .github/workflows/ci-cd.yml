name: CI/CD

on:
  push:
    paths:
      - melody_core/*
      - melody_processes/*
      - .github/workflows/ci-cd.yml
  workflow_run:
    workflows:
      - Commit melody_core
      - Commit melody_processes
    types: [completed]
  workflow_dispatch:

jobs:
#  build-melody_core:
#    runs-on: ubuntu-latest
#    if: ${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: microsoft/powerplatform-actions/pack-solution@v0
#        with:
#          solution-file: ${{ runner.temp }}/melody_core.zip
#          solution-folder: melody_core
#          solution-type: Managed
#      - uses: actions/upload-artifact@v2
#        with:
#          name: melody_core
#          path: ${{ runner.temp }}/melody_core.zip
#  build-melody_processes:
#    runs-on: ubuntu-latest
#    if: ${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: microsoft/powerplatform-actions/pack-solution@v0
#        with:
#          solution-file: ${{ runner.temp }}/melody_processes.zip
#          solution-folder: melody_processes
#          solution-type: Managed
#      - uses: actions/upload-artifact@v2
#        with:
#          name: melody_processes
#          path: ${{ runner.temp }}/melody_processes.zip
  deploy:
    environment: production
    runs-on: windows-latest
#    needs:
#      - build-melody_core
#      - build-melody_processes
    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: melody_core
#      - uses: actions/download-artifact@v2
#        with:
#          name: melody_processes
      - run: |
          Install-Module Microsoft.Xrm.Data.PowerShell -Force
          $conn = Get-CrmConnection -ConnectionString $env:CONNECTION_STRING
          $solutions = Get-CrmRecordsByFetch `
            -conn $conn `
            -Fetch ( `
              "<fetch>" +
                "<entity name=`"solution`">" +
                  "<attribute name=`"uniquename`" />" +
                  "<attribute name=`"version`" />" +
                  "<filter>" +
                    "<condition attribute=`"uniquename`" operator=`"in`">" +
                      "<value>melody_core</value>" +
                      "<value>melody_processes</value>" +
                    "</condition>" +
                  "</filter>" +
                "</entity>" +
              "</fetch>"
            )
          $solutions.CrmRecords | ForEach-Object {
            $solution = $_
            Write-Host "::set-output name=$($solution.uniquename)-version::$($solution.version)"
          }
        shell: powershell
        env:
          CONNECTION_STRING: "AuthType=ClientSecret; TenantId=${{ secrets.TENANT_ID }}; ClientId=${{ secrets.CLIENT_ID }}; ClientSecret=${{ secrets.CLIENT_SECRET }}; Url=${{ secrets.URL }}"
        id: deployment-plan
        name: Get deployment plan
      - run: |
          echo "${{ steps.deployment-plan.outputs.melody_core-version }}"
          echo "${{ steps.deployment-plan.outputs.melody_processes-version }}"
        name: Output versions
#      - uses: microsoft/powerplatform-actions/import-solution@v0
#        with:
#          environment-url: ${{ secrets.URL }}
#          app-id: ${{ secrets.CLIENT_ID }}
#          client-secret: ${{ secrets.CLIENT_SECRET }}
#          tenant-id: ${{ secrets.TENANT_ID }}
#          solution-file: melody_core.zip
#          run-asynchronously: true
#          import-as-holding: true
#      - uses: microsoft/powerplatform-actions/import-solution@v0
#        with:
#          environment-url: ${{ secrets.URL }}
#          app-id: ${{ secrets.CLIENT_ID }}
#          client-secret: ${{ secrets.CLIENT_SECRET }}
#          tenant-id: ${{ secrets.TENANT_ID }}
#          solution-file: melody_processes.zip
#          run-asynchronously: true
#          import-as-holding: true
