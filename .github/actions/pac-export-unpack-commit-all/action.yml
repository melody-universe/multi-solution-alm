name: pac auth
description: Export, unpack, and commit a collection of solutions
inputs:
  environment-url:
    description: 'URL of Power Platform environment to connect with; e.g. "https://test-env.crm.dynamics.com"'
    required: false
  user-name:
    description: 'Power Platform user name to authenticate with, e.g. myname@my-org.onmicrosoft.com. Setting this input makes user-name and password required; specifying alternate "app-id" credential set of inputs will result in an error.'
    required: false
  password-secret:
    description: "Power Platform password, required if authenticating with username. Do NOT checkin password, instead create a secret and reference it here with: see: https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#using-encrypted-secrets-in-a-workflow"
    required: false
  app-id:
    description: 'The application id to authenticate with. Setting this input makes app-id, tenant-id and client-secret required; specifying alternate "username" credential set of inputs will result in an error.'
    required: false
  client-secret:
    description: "The client secret to authenticate with. Required if authenticating with app-id."
    required: false
  tenant-id:
    description: "Tenant id if using app-id & client secret to authenticate."
    required: false

  solution-names:
    description: "A comma-separated list of names of solutions to export"
    required: true
  message:
    description: "The message for the commit"
    required: false

runs:
  using: composite
  steps:
    - uses: ./.github/actions/use-development

    - uses: ./.github/actions/pac-auth
      with:
        environment-url: ${{ inputs.environment-url }}
        user-name: ${{ inputs.user-name }}
        password-secret: ${{ inputs.password-secret }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}

    - id: get-message
      shell: bash
      env:
        MESSAGE: ${{ inputs.message }}
        SOLUTION_NAMES: ${{ inputs.solution-names }}
      run: |
        if [ -z "$MESSAGE" ]; then {
          defaultMessage="automated solution export/unpack/bump/commit ($SOLUTION_NAMES)"
          echo "Message is null. Setting it to a default: \"$defaultMessage\""
          echo "::set-output name=message::$defaultMessage"
        } else {
          echo "::set-output name=message::$MESSAGE"
        } fi

    - id: export
      shell: bash
      run: |
        solutions=$(echo "${{ inputs.solution-names }}" | tr "," "\n")
        for solution in $solutions; do
          pac solution export \
            --path $RUNNER_TEMP/$solution.zip \
            --name $solution \
            --async &

          pac solution export \
            --path $RUNNER_TEMP/$(echo $solution)_managed.zip \
            --name $solution \
            --managed \
            --async &
        done
        wait

    - id: unpack
      shell: bash
      run: |
        solutions=$(echo "${{ inputs.solution-names }}" | tr "," "\n")
        for solution in $solutions; do
          pac solution unpack \
            --zipfile $RUNNER_TEMP/$solution.zip \
            --folder $solution \
            --packagetype Both \
            --allowDelete \
            --allowWrite &
        done
        wait

    - id: get-api-token
      uses: ./.github/actions/get-api-token
      with:
        environment-url: ${{ inputs.environment-url }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}

    - id: bump-version
      shell: bash
      env:
        MESSAGE: ${{ steps.get-message.outputs.message }}
      run: |
        message=${MESSAGE,,}
        solutions=$(echo "${{ inputs.solution-names }}" | tr "," "\n")
        token="${{ steps.get-api-token.outputs.token }}"
        url="${{ inputs.environment-url }}"
        for solution in $solutions; do
          currentVersion=$(
            grep -iEo "<version>[0-9.]*" "./$solution/Other/Solution.xml" |
            awk -F '>' '{print $2}'
          )
          echo "$solution current version is $currentVersion."
          major=$(echo $currentVersion | awk -F '.' '{print $1}')
          minor=$(echo $currentVersion | awk -F '.' '{print $2}')
          build=$(echo $currentVersion | awk -F '.' '{print $3}')
          revision=$(echo $currentVersion | awk -F '.' '{print $4}')
          
          action="skip"
          if [[ $message =~ ^major:.*$ ]]
          then
            let "major = $major + 1"
            minor=0
            build=0
            revision=0
            action="major"
          elif [[ $message =~ ^minor:.*$ ]]
          then
            let "minor = $minor + 1"
            build=0
            revision=0
            action="minor"
          elif [[ $message =~ ^build:.*$ ]]
          then
            let "build = $build + 1"
            revision=0
            action="build"
          elif [[ $message =~ ^revision:.*$ || \
                    $(git diff --numstat "./$solution" | wc -l) -gt 0 ]]
          then
            let "revision = $revision + 1"
            action="revision"
          else
            echo "No version update action found for $solution."
          fi

          if [[ $action != "skip" ]]
          then
            newVersion="$major.$minor.$build.$revision"
            echo "Updating $solution $action version number to $newVersion..."
            sed -i \
              "s|\(<version>\)[0-9.]*\(</version>\)|\1$newVersion\2|i" \
              "./$solution/Other/Solution.xml"
            solutionId=$(curl -s \
              -H "Accept: application/json" \
              -H "Authorization: Bearer $token" \
              "$url/api/data/v9.2/solutions?\$select=solutionid&\$filter=uniquename%20eq%20'$solution'" | \
              jq -r .value[0].solutionid)
            curl -s \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $token" \
              -X PATCH \
              -d "{\"version\": \"$newVersion\"}" \
              "$url/api/data/v9.2/solutions($solutionId)"
          fi
        done

    - uses: EndBug/add-and-commit@v7
      with:
        branch: development
        message: ${{ steps.get-message.outputs.message }}
