on:
  workflow_dispatch:
    inputs:
      solution-name:
        description: Unique name of the solution to commit
        required: true
      commit-message:
        description: Message to associate to the git commit
        required: true
        default: automated solution export/unpack/commit
  push:

jobs:
  export-managed:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ secrets.URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: melody_core
          solution-output-file: melody_core_managed.zip
          managed: true
          run-asynchronously: true
      - uses: actions/upload-artifact@v2
        with:
          name: managed-solution
          path: melody_core_managed.zip
  export-unmanaged:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ secrets.URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: melody_core
          solution-output-file: melody_core.zip
          managed: false
          run-asynchronously: true
      - uses: actions/upload-artifact@v2
        with:
          name: unmanaged-solution
          path: melody_core.zip
  unpack-and-commit:
    runs-on: ubuntu-latest
    needs:
      - export-managed
      - export-unmanaged
    steps:
      - uses: actions/checkout@v2
      - name: download managed solution
        uses: actions/download-artifact@v2
        with:
          name: managed-solution
          path: ${{ env.RUNNER_TEMP }}
      - name: download unmanaged solution
        uses: actions/download-artifact@v2
        with:
          name: unmanaged-solution
          path: ${{ env.RUNNER_TEMP }}
      - run: |
          cd ${{ env.RUNNER_TEMP }}
          ls -R