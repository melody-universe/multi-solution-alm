name: deploy
description: pack and import all solutions within this repository
inputs:
  environment-url:
    description: 'URL of Power Platform environment to connect with; e.g. "https://test-env.crm.dynamics.com"'
    required: true
  app-id:
    description: "The application id to authenticate with."
    required: true
  client-secret:
    description: "The client secret to authenticate with."
    required: true
  tenant-id:
    description: "Tenant id to authenticate with."
    required: true
  managed:
    description: "Whether or not to deploy managed solutions"
    default: true
  allow-rollback:
    default: false
    description: "Flag to allow rollback method"
    required: false

runs:
  using: composite
  steps:
    - uses: ./.github/actions/pac-auth
      with:
        environment-url: ${{ inputs.environment-url }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}
    - id: get-repo-solution-names
      uses: ./.github/actions/get-repo-solution-names
    - id: get-api-token
      uses: ./.github/actions/get-api-token
      with:
        environment-url: ${{ inputs.environment-url }}
        app-id: ${{ inputs.app-id }}
        client-secret: ${{ inputs.client-secret }}
        tenant-id: ${{ inputs.tenant-id }}
    - env:
        MANAGED: ${{ inputs.managed }}
        SOLUTION_NAMES: ${{ steps.get-repo-solution-names.outputs.solution-names }}
        TOKEN: ${{ steps.get-api-token.outputs.token }}
        URL: ${{ inputs.environment-url }}
      run: |
        # Store the repository solutions into an array
        solutionNames=$(echo $SOLUTION_NAMES | tr "," "\n")

        # Keep track of the solutions that we import as holding solutions
        upgrades=""

        for name in $solutionNames
        do
          echo "solution name: $name"
          # Read the local version for the solution from its respective Solution.xml file
          localVersion=$(
            grep -iEo "<version>[0-9.]*" "./$name/Other/Solution.xml" |
            awk -F '>' '{print $2}'
          )

          # Split the local version into its digits for comparison
          localMajor=$(echo $localVersion | awk -F '.' '{print $1}')
          localMinor=$(echo $localVersion | awk -F '.' '{print $2}')
          localBuild=$(echo $localVersion | awk -F '.' '{print $3}')
          localRevision=$(echo $localVersion | awk -F '.' '{print $4}')
          echo "local version: $localVersion"

          # Retrieve the version of the solution in the target environment by querying the API
          remoteVersion=$(curl -s \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            "$URL/api/data/v9.2/solutions?\$select=version&\$filter=uniquename%20eq%20'$name'" | \
            jq -r ".value[0].version"
          )
          echo "remote version: $remoteVersion"
          if [[ $remoteVersion == "null" ]]
          then
            # If the remote version is null, the solution does not currently exist in the target environment
            #   Set action to "import"
            action="import"
          else
            # Split the remote verison into its respective digits
            remoteMajor=$(echo $remoteVersion | awk -F '.' '{print $1}')
            remoteMinor=$(echo $remoteVersion | awk -F '.' '{print $2}')
            remoteBuild=$(echo $remoteVersion | awk -F '.' '{print $3}')
            remoteRevision=$(echo $remoteVersion | awk -F '.' '{print $4}')

            # If the major and minor digits match for the local and remote versions...
            if [[ $localMajor -eq $remoteMajor
              && $localMinor -eq $remoteMinor ]]
            then
              # If the build and revision digits also match....
              if [[ $localBuild -eq $remoteBuild
                && $localRevision -eq $remoteRevision ]]
              then
                # The solution in the target environment is already up-to-date
                #   Skip this solution's deployment
                action="skip"
              # If the local build / revision digits are higher than the remote build / revision digits...
              elif [[ $localBuild -gt $remoteBuild
                || ($localBuild -eq $remoteBuild
                  && $localRevision -gt $remoteRevision) ]]
              then
                # Flag this solution as an update
                action="update"
              else
                # Otherwise, by the process of elimination, the version of the solution in the target environment is higher than the local version
                #   Mark the deployment action for "rollback"
                action="rollback"
              fi
            # If the major / minor digits do not match,
            #   check if the major / minor digits are greater in the local version over the remtoe version
            elif [[ $localMajor -gt $remoteMajor
              || ($localMajor -eq $remoteMajor
                && $localMinor -gt $remoteMinor) ]]
            then
              # If so, mark the solution for upgrade
              action="upgrade"
            else
              # Otherwise, by process of elimination,
              #   the remote version has higher major / minor digits and is newer than the local version
              #   Mark the solution for "rollback"
              action="rollback"
            fi
          fi

          echo "deployment action: $action"

          # If we are deploying unmanaged solutions, we don't need to do
          #   anything special to import a solution with a lower version.
          # Otherwise, we need to create another version of this solution
          #   of a lower version before continuing.
          if [[ $MANAGED == "true" && $action == "rollback" ]]
          then

            # If allow-rollback is not "true", throw an error and exit the workflow
            if [[ "${{ inputs.allow-rollback }}" != "true" ]]
            then
              echo "::error title=Unexpected Version Number::$name is a higher version in the target environment ($remoteVersion) than in the locally packed solution ($localVersion), and rollback is not enabled for this deployment."
              exit 1
            fi

            # We need to generate a lower version than the one we are deploying
            #   This will allow us to then upgrade to the locally built version

            # Start with the locally built version
            rollbackMajor=$localMajor
            rollbackMinor=$localMinor
            rollbackBuild=$localBuild
            rollbackRevision=$localRevision

            # If the revision is greater than 0, we can simply decrement it
            if [[ $rollbackRevision -gt 0 ]]
            then
              let "rollbackRevision = $rollbackRevision - 1"
            
            # Otherwise, we're going to need to decrement a higher digit
            #   If the build version greater 0, we can decrement that
            elif [[ $rollbackBuild -gt 0 ]]
            then
              let "rollbackBuild = $rollbackBuild - 1"
            
            # Keep checking higher digits until we find a digit greater than 0
            elif [[ $rollbackMinor -gt 0 ]]
            then
              let "rollbackMinor = $rollbackMinor - 1"
            
            # Check major
            elif [[ $rollbackMajor -gt 0 ]]
            then
              let "rollbackMajor = $rollbackMajor - 1"
            
            # We won't be able to rollback to 0.0.0.0.
            #   Throw an error and exit the workflow.
            else
              echo "::error title=Unexpected Version Number::$name has a local version of 0.0.0.0. Cannot rollback to this version number."
              exit 1
            fi

            # Combine the digits together into the rollback version
            rollbackVersion="$rollbackMajor.$rollbackMinor.$rollbackBuild.$rollbackRevision"
            echo "Generating solution with reduced version number ($rollbackVersion) for $name"

            # Replace the version in the Solution.xml with the rollback version
            sed -i \
              "s|\(<version>\)[0-9.]*\(</version>\)|\1$rollbackVersion\2|i" \
              "./$name/Other/Solution.xml"
            
            # Build version of the solution with "reduced" suffix
            pac solution pack \
              --zipfile "$name_reduced.zip" \
              --folder $name \
              --packagetype Managed
            
            # Set the Solution.xml version back to the version from the selected commit
            echo "Restoring version to commit value for $name"
            sed -i \
              "s|\(<version>\)[0-9.]*\(</version>\)|\1$localVersion\2|i" \
              "./$name/Other/Solution.xml"
          fi

          # If we've determined that we're skipping this solution,
          #   write to the console and move onto the next solution
          if [[ $action == "skip" ]]
          then
            echo "$name is already up-to-date; skipping"
          else
            # First, pack the solution
            echo "packing $name"
            if [[ $MANAGED == "true" ]]
            then
              pac solution pack \
                --zipfile "$name.zip" \
                --folder $name \
                --packagetype Managed
            else
              pac solution pack \
                --zipfile "$name.zip" \
                --folder $name \
                --packagetype Unmanaged
            fi
            
            # Carry out the determined action
            # For unmanaged, treat every action the same.
            #   We don't get any benefit from updates / upgrades with unmanaged solutions
            # For managed, only run standard import for update / import actions
            if [[ ($MANAGED == "false" && \
                    ($action == "rollback" ||
                    $action == "upgrade")) ||
                  $action == "import" ||
                  $action == "update" ]]
            then
              echo "importing $name"
              pac solution import \
                --path "$name.zip" \
                --activate-plugins \
                --async
            
            # The upgrade pattern is only valid for managed solutions
            elif [[ $MANAGED == "true" && $action == "upgrade" ]]
            then
              # For upgrades, first import the solution as a holding solution
              echo "importing holding solution for $name"
              pac solution import \
                --path "$name.zip" \
                --activate-plugins \
                --import-as-holding \
                --async
              # Add the name to the *beginning* of the upgrade list
              #   This is important because when we apply the upgrades,
              #   we want to do so the reverse order that we imported them.
              upgrades="$name,$upgrades"
            
            elif [[ $MANAGED == "true" && $action == "rollback" ]]
            then
              # First reduce the version by importing as an update
              echo "importing reduced version number for $name"
              pac solution import \
                --path "$name_reduced.zip" \
                --activate-plugins \
                --async
              
              # Then import the rollback solution as a holding solution
              echo "importing rollback version number for $name"
              pac solution import \
                --path "$name.zip" \
                --activate-plugins \
                --import-as-holding \
                --async

              # Add the holding solution to the upgrades list, same as for upgrades
              upgrades="$name,$upgrades"
            
            # If the determined action wasn't accounted for, write a friendly error to the console and exit the action
            #   This *should* never get hit, but we've added the check in case a breaking change is introduced to the previous logic 
            else
              echo "::error title=Unexpected Action::unexpected action ($action) for $name"
              exit 1
            fi
          fi
        done

        # If any holding solutions were imported...
        if [[ $upgrades != "" ]]
        then
          # split the $upgrades variable into an array
          solutionsToUpgrade=$(echo ${upgrades::-1} | tr "," "\n")
          
          # for each solution to upgrade
          for name in $solutionsToUpgrade
          do
            # apply the upgrade
            echo "applying upgrade to $name"
            pac solution upgrade \
              --solution-name $name \
              --async
          done
        fi
      shell: bash
